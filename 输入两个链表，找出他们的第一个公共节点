输入两个链表，找出他们的第一个公共节点
分析：如果两个单向链表有公共的结点，也就是说两个链表从某一结点开始，它们的m_pNext都指向同一个结点。
但由于是单向链表的结点，每个结点只有一个m_pNext，因此从第一个公共结点开始，之后它们所有结点都是重合
的，不可能再出现分叉。所以，两个有公共结点而部分重合的链表，拓扑形状看起来像一个Y，而不可能像X。
    我们先把问题简化：如何判断两个单向链表有没有公共结点？前面已经提到，如果两个链表有一个公共结点，那么
该公共结点之后的所有结点都是重合的。那么，它们的最后一个结点必然是重合的。因此，我们判断两个链表是不
是有重合的部分，只要分别遍历两个链表到最后一 个结点。如果两个尾结点是一样的，说明它们用重合；否则两
个链表没有公共的结点。
    在上面的思路中，顺序遍历两个链表到尾结点的时候，我们不能保证在两个链表上同时到达尾结点。这是因为两个
链表不一定长度一样。但如果假设一个链表比另一个长l个结点，我们先在长的链表上遍历l个结点，之后再同步遍
历，这个时候我们就能保证同时到达最后一个结点了。由于两个链表从第一个公共结点考试到链表的尾结点，这一
部分是重合的。因此，它们肯定也是同时到达第一公共结点的。于是在遍历中，第一个相同的结点就是第一个公共
的结点。
  在这个思路中，我们先要分别遍历两个链表得到它们的长度，并求出两个长度之差。在长的链表上先遍历若干次之
后，再同步遍历两个链表，知道找到相同的结点，或者一直到链表结束。此时，如果第一个链表的长度为m，第二个
链表的长度为n，该方法的时间复杂度为O(m+n)。
基于这个思路，我们不难写出如下的代码：
public class FirstCommonNodeList {
    static class Node {
        int data;
        Node next;
    }
    public static void main(String[] args) {
        Node node1 = null, node2 = null;
        Node node = findFirstCommonNode(node1, node2);
        System.out.println(node);
    }
    /*
     * 单链表相交的结果为成“Y”形
     */
    private static Node findFirstCommonNode(Node node1, Node node2) {
        // 获取链表的长度
        int nLength1 = GetListLength(node1);
        int nLength2 = GetListLength(node2);
        // 应多走的步数
        int extraLength = nLength1 - nLength1;
        Node pNodeLong = node1, pNodeShort = node2;
        if (nLength1 < nLength2) {
            extraLength = nLength2 - nLength1;
            pNodeLong = node2;
            pNodeShort = node1;
        }
        // 长链表先走extraLength步
        while (extraLength > 0) {
            pNodeLong = pNodeLong.next;
            extraLength--;
        }
        Node pNodeCommon = null;
        // 两个链表同时向后走
        while (pNodeLong != null && pNodeShort != null) {
            pNodeLong = pNodeLong.next;
            pNodeShort = pNodeShort.next;
            if (pNodeLong == pNodeShort) {
                pNodeCommon = pNodeLong;
                break;
            }
        }
        return pNodeCommon;
    }
    /*
     * 获取链表长度
     */
    private static int GetListLength(Node node1) {
        int length = 0;
        while (node1 != null) {
            length++;
            node1 = node1.next;
        }
        return length;
    }
}
